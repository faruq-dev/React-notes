//*************** JavaScript Arrays ****************** */

{
  let newArray = [12, 17, 56, 25, 90]; //This is an Array
  console.log(newArray[2]); // এভাবে অ্যারের ভেতরের নির্দিষ্ট কোনো এলিমেন্টকে এক্সেস করা যায় (১২, ১৭, ৫৬ ইত্যাদি হলো এই অ্যারের এলিমেন্ট)। newArray এর পাশে ব্লূ ব্রাকেটে 2 হলো অ্যারের এলেমেন্টের ইনডেক্স নাম্বার (০ থেকে ইনডেক্স কাউন্ট শুরু হয়)। এখানে ২ নাম্বার ইনডেক্স এলিমেন্ট হলো ৫৬।

  newArray[3] = 30; //ইনডেক্স নাম্বার ধরে অ্যারের ভেতরের নির্দিষ্ট কোনো এলিমেন্টের ভ্যালু চেঞ্জও করা যায় এভাবে। এখানে newArray এর ৩ নাম্বার ইনডেক্সের ভ্যালু ২৫ থেকে ৩০ করে দেওয়া হয়েছে
  console.log(newArray);
  console.log(newArray.length); // এই .length মেথড দিয়ে অ্যারের ভেতর কয়টা এলিমেন্ট আছে তা বের করা যায়।
  console.log(newArray[newArray.length - 1]); //অনেক বেশি সংখ্যক এলিমেন্ট যুক্ত কোনো অ্যারের একদম লাস্ট ইনডেক্স এলিমেন্টকে কনসোলে প্রিন্ট করতে এই পদ্ধতি ব্যবহার করা হয় (অনেক গুলো অ্যারে থাকলে গননা করার ঝামেলা এড়ানোর জন্য এই পদ্ধতি)

  Array.isArray(); //কোনো একটা ভ্যারিয়েবল অ্যারে কিনা সেটা চেক করার জন্য এই মেথড ইউজ করা হয়। isArray এর পাশের ব্রাকেটে ভ্যারিয়েবল name লিখে এরপর এটাকে কনসোল করতে হবে।
  console.log(Array.isArray(newArray)); //***
}

//Arrray Methods*********
{
  let array = [12, 15, 20, 30];
  console.log(array.length); //// এই .length মেথড দিয়ে অ্যারের ভেতর কয়টা এলিমেন্ট আছে তা বের করা যায়।
  console.log(array[array.length - 1]); //// অ্যারের একদম লাস্ট ইনডেক্স এলিমেন্টকে কনসোলে প্রিন্ট করতে এই পদ্ধতি ব্যবহার করা হয়
  console.log(array.toString()); ////অ্যারেকে স্ট্রিং এ কনভার্ট
  console.log(array.join("-")); ////অ্যারেকে স্ট্রিং এ কনভার্ট করার পর সংখ্যা গুলোর মাঝে কমা (,) এর পরিবর্তে অন্য যেকোনো কিছু দিতে এই মেথড ইউজ করা হয়
}
{
  let array = [10, 20, 30, 40];
  console.log(array.push(60)); //অ্যারের এলিমেন্ট গুলোর শেষে নতুন আরেকটা এলেমেন্ট যুক্ত করতে এই .push() মেথড ব্যবহার করা হয়
  console.log(array);
}
{
  let array = [10, 20, 30, 40];
  array.pop(); ////অ্যারের এলিমেন্ট গুলোর মধ্যে সর্বশেষ এলিমেন্টটাকে রিমোভ করার জন্য .pop() মেথড ইউজ করা হয়
  console.log(array);
}
{
  let array = [10, 20, 30, 40];
  array.unshift(16); ////অ্যারের এলিমেন্ট গুলোর একদম শুরুতে আরেকটা এলিমেন্ট যুক্ত করতে .unshift() মেথড প্রয়োজন হয়, unshift এর ডানে ব্র্যাকেটে যে ভ্যালু দেওয়া হবে সেটাই অ্যারের একদম প্রথম এলেমেন্ট হবে।
  console.log(array);
}
{
  let array = [10, 20, 30, 40];
  array.shift(); ////অ্যারের এলিমেন্ট গুলোর মধ্যে সর্বপ্রথম এলিমেন্ট টাকে রিমোভ করার জন্য .shift() মেথড ইউজ করা হয়
  console.log(array);
}

//বিশেষ নোটঃ .shift(১ম এলিমেন্ট রিমোভ), .unshift(প্রথমে এলিমেন্ট যুক্তকরন), .pop(শেষ এলিমেন্ট রিমোভ), .push(শেষে এলিমেন্ট যুক্তকরন) */

//Splice Method ***
//array এর মাঝখান থেকে কোনো element কে রিমোভ ও একই জায়গায় নতুন কোনো এলিমেন্টকে যুক্ত করার জন্য .splice() মেথড ইউজ করা হয়
{
  let array = [10, 20, 30, 40, 50, 60];
  array.splice(2, 3, 46, 56, 84); //এখানে ব্রাকেটের ভেতর প্রথম ২ হচ্ছে Index নাম্বার (অর্থাৎ ২নাম্বার ইনডেক্স থেকে রিমোভ করা শুরু হবে), ৩ হচ্ছে কতগুলা এলিমেন্টকে রিমোভ করা হবে (অর্থাৎ ২ নাম্বার ইনডেক্স থেকে শুরু করে ২,৩,৪ এই ৩টা এলিমেন্টকে রিমোভ করা হবে, যার ফলে ৩০,৪০,৫০ এই ৩টা এলিমেন্ট রিমোভ হয়ে যাবে)। ৩ এর পর ৪৬, ৫৬, ৮৪ এই ৩ টা হলো নতুন ৩টা এলিমেন্ট যা ২, ৩, ৪ Index নাম্বারের ফাকা হওয়া যায়গায় বসে যাবে।
  console.log(array);
}

//tospliced metod ***
//মেইন অ্যারেকে কোনোরূপ পরিবর্তন না করেই আলাদা একট নতুন অ্যারে তৈরী (আগের অ্যারের ক্লোন) করে সেই নতুন অ্যারেটাকে পরিবর্তন করার জন্য এই মেথড ব্যবহার করা হয় ।
{
  let array = [10, 20, 30, 40, 60]; //এই অ্যারেকে কনসোল করলে দেখা যাবে এতে কোনো পরিবর্তন আসে নাই, এট অক্ষত আছে
  let b = array.toSpliced(1,3); //আগের অ্যারেটাকে চেঞ্জ করে b নামক নতুন অ্যারের ভেতরে রাখা হয়েছে। এখানে ব্র্যাকেটের ভেতর (1, 3) ঠিক আগের .splice() মেথডে মতই কাজ করে। ঠিক উপরের প্যারাগ্রাফটা দেখুন।
  console.log(b);
  console.log(array);
}

// .slice() method
//একটা অ্যারের নির্দিষ্ট কিছু এলেমেন্টকে আলদা করে নিয়ে আরেকটা ভিন্ন অ্যারে তৈরীর জন্য .slice() method ব্যবহার করা হয়।
{
  let array = [20, 30, 40, 50];
  let b = array.slice(0,2); //এখানে ব্র্যাকেটের ভেতর (0, 2)এর 0 হচ্ছে ইনডেক্স নাম্বার, আর 2 হচ্ছে কতগুলা ইনডেক্স নেওয়া হবে তার সংখ্যা।
  console.log(b);
} 

// .concat() method
//দুইটা অ্যারেকে যুক্ত করে বা মার্জ করে একটা অ্যারেতে কনভার্ট করতে .concat() মেথড ইউজ করা হয়
{
  let array = [20, 30, 40, 50];
  let array2 = [30, 74, 12];
  let add_array = array.concat(array2);
  console.log(add_array);
}



//*************** Array Search Methods ****************/

// 1- indexOf method
{
  let array = ['Apple', 'Mango', 'Banana', 'Pine Apple', 'Mango' ];
  let index = array.indexOf('Mango'); //অ্যারে এর ভেতরে যতগুলা এলিমেন্ট আছে তারমধ্যে একটা নির্দিষ্ট এলিমেন্ট কত নাম্বার ইনডেক্স পজিশন থেকে শুরু হয়েছে তা বের করার জন্য indexOf method ব্যবহার করা হয়। যে এলিমেন্টের ইনডেক্স পজিশন বের করতে হবে তাকে indexOf এর পরে ব্র্যাকেট () এর মধ্যে রাখতে হবে ডাবল কোট সহ। চাইলে ব্র্যাকেটের ভেতরে কোটেশনের পর কমা দিয়ে একটা ইনডেক্স নাম্বার বলে দেওয়া যায় এভাবে text.indexOf("Mango", 15)। তাহলে ওই ইনডেক্স নাম্বার থেকে সার্চ করা শুরু করবে। একে সেকেন্ড প্যারামিটার বলে।
  console.log(index);
}

// 2- lastIndexOf method
{
  let array = ['Apple', 'Mango', 'Banana', 'Pine Apple', 'Mango' ];
  let index = array.lastIndexOf('Mango'); // এই মেথডও indexOf এর মতই তবে পার্থক্য হলো এটি যে এলিমেন্টকে সার্চ করা হবে সেটা অ্যারে এর ভেতর সর্বশেষ যেখানে রিপিট হয়েছে সেখান থেকে ইনডেক্স কাউন্ট করবে। ** এই উভয় মেথডেই সার্চ করা এলিমেন্টকে অ্যারে এর মধ্যে না পেলে -1 দেখাবে কনসোলে।
  console.log(index);
}

// 3- .includes() method
{
  let array = ['Apple', 'Mango', 'Banana', 'Pine Apple', 'Mango'];
  let index = array.includes('Mango'); //কোন নির্দিষ্ট এলিমেন্ট সেই অ্যারের ভেতর আছে নাকি নেই সেটা বের করার জন্য এই মেথড ইউজ হয়। .includes() এর ডানে ব্রাকেটে যে এলিমেন্ট লেখা হবে সেটা অ্যারের মধ্যে পেলে True আসবে, না পেলে False আসবে
  console.log(index);
}

// .find() method
// অ্যারের মধ্যে থাকা কোনো এলিমেন্ট নির্দিষ্ট কোনো সংখ্যার চেয়ে বড় বা ছোট কিনা সেটা বের করার জন্য এই মেথড ইউজ করা হয়। যেমন, নিচে testArray নামক অ্যারের মধ্যে কোনো এলিমেন্ট ৮ এরচেয়ে বড় কিনা সেটা বের করতে এই মেথড ইউজ করতে হয়।
{
  let testArray = [4, 5, 6, 10, 20, 26, 60]; //এই মেথড ইউজ করার নিয়ম হলো testArray.find এর ব্র্যাকেটে একটা ফাংশন লিখতে হয়, ফাংশনে value, index, array এই তিনটা আর্গুমেন্ট দিতে হয়, এরপর ফাংশনের কার্লি ব্রেসে মধ্যে return value > 8 লিখতে হয়, এরমানে হলো এই অ্যারেতে ৮ এরচেয়ে বড় কোন ভ্যালু থাকলে সেটা রিটার্ন করো। আমরা দেখছি এই অ্যারেতে ৮ এরচেয়ে বড় আরো ৪টা এলিমেন্ট রয়েছে যেমন ১০, ২০, ২৬, ৬০, এই ভ্যালুগুলোর সবই ৮ এরচেয়ে বড় কিন্ত কনসোল করলে শুধু ১০ রিটার্ন করবে কারন ৮ এরচেয়ে বড় ভ্যালুগুলোর মধ্যে ১০ সবার প্রথমে আছে। 
  let targetValue = testArray.find(function(value, index, array){
    return value > 8;
  });
  console.log(targetValue);
}

// .findLast() method
// এটা হুবহু .find() মেথডের মতই, পার্থক্য হলো ৮ এরচেয়ে বড় এলিমেন্টগুলো মধ্যে যেটা সবার শেষ আছে তাকে কনসোলে রিটার্ন করবে।
{
  let testArray = [4, 5, 6, 10, 20, 26, 60]; // আমরা দেখছি এই অ্যারেতে ৮ এরচেয়ে বড় আরো ৪টা এলিমেন্ট রয়েছে যেমন ১০, ২০, ২৬, ৬০, এই ভ্যালুগুলোর সবই ৮ এরচেয়ে বড় কিন্ত কনসোল করলে 60 রিটার্ন করবে কারন ৮ এরচেয়ে বড় ভ্যালুগুলোর মধ্যে 60 সবার শেষে আছে। */
  let targetValue = testArray.findLast(function(value, index, array){
    return value > 8;
  });

  console.log(targetValue);
}

// .findIndex() method
// এটাও .find() মেথডের মতই, কিন্ত পার্থক্য হলো ৮ এরচেয়ে বড় এলিমেন্টগুলো মধ্যে যেই এলিমেন্ট সবার আগে আছে সেই এলিমেন্টকে রিটার্ন না করে  সেই এলিমেন্টের ইনডেক্স নাম্বারকে রিটার্ন করবে।
{
  let testArray = [4, 5, 6, 10, 20, 26, 60];
  let targetValue = testArray.findIndex(function(value, index, array){
    return value > 8; 
  }); // এখানে ৮ এরচেয়ে বড় এলিমেন্টগুলোর মধ্যে সবার প্রথমে আছে ১০, এই ১০ এর ইনডেক্স পজিশন হলো ৩ (যেহেতু ০ থেকে ইনডেক্স গননা হয়)। তাই কনসোলে ৩ প্রিন্ট হবে

  console.log(targetValue);
}

//.findLastIndex() method
// এটা .findIndex() method এর ঠিক বীপরিত, অর্থাৎ ৮ এরচেয়ে বড় ভ্যালুগুলোর মধ্যে যেটা সবার শেষে আছে তার ইনডেক্স পজিশনকে রিটার্ন করে।
{
  let testArray = [4, 5, 6, 10, 20, 26, 60];
  let targetValue = testArray.findLastIndex(function(value, index, array){
    return value > 8; 
  }); // এখানে ৮ এরচেয়ে বড় এলিমেন্টগুলোর মধ্যে সবার শেষে আছে ৬০, এই ৬০ এর ইনডেক্স পজিশন হলো ৬ (যেহেতু ০ থেকে ইনডেক্স গননা হয়)। তাই কনসোলে ৬ প্রিন্ট হবে

  console.log(targetValue);
}

// .flat() method
// একটা অ্যারের মধ্যে যদি অনেকগুলা অ্যারে থাকে তাহলে সবগুলা অ্যারে কে ফ্ল্যাট করে একটা অ্যারেতে কনভার্ট করার জন্য .flat() মেথড ইউজ করা হয়। **মূল্য অ্যারের মধ্যে থাকে সাব অ্যারের মধ্যেও যদি অ্যারে থাকে তাহলে সেই অ্যারে গুলো ফ্ল্যাট/মার্জ হবেনা, শুধু সাব অ্যারেগুলাই ফ্ল্যাট হবে।
// যেমন: [[12],[16],[34, [10, 14]]], এখানে [10, 14] হলো মূল অ্যারে সাব অ্যারের মধ্যে থাকা অ্যারে (থার্ড লেয়ার)। এগুলা মূল অ্যারের সাথে মার্জ হবেনা।
{
  let testArray = [[12],[16],[34],[42],[106],[26]];
  let index = testArray.flat();
  console.log(index);
}

//*********************** Array Sort Methods ************************//

// .sort() method
// অ্যারের ভেতরে থাকা এলিমেন্ট গুলোকে অ্যালফাবেটিকাল অর্ডারে সাজানোর জন্য এই মেথড ব্যবহার হয়। A দিয়ে যেই এলিমেন্ট আছে তাকে সবার প্রথমে, B দিয়ে এলিমেন্ট কে ২য় পজিশনে......... এভাবে পর্যায়ক্রমে সাজিয়ে দিবে এই মেথড।
{
  let testArray = ['Apple', 'Mango', 'Banana', 'Pine Apple', 'Mango'];
  testArray.sort();
  console.log(testArray);
}

// .reverse() method
// অ্যারের ভেতরে থাকা এলিমেন্ট গুলোকে উলটো দিক থেকে সাজানোর জন্য এই মেথড ইউজ করা হয়। অ্যারের একদম শেষ এলিমেন্টকে সবার প্রথমে নিয়ে আসবে, এরপর শেষ থেকে ২য় এলিমেন্টকে প্রথম থেকে ২য় অবস্থানে নিয়ে আসবে, এভাবে পর্যায়ক্রমে রিভার্স হবে।
{
  let testArray = ['Apple', 'Mango', 'Banana', 'Pine Apple', 'Mango'];
  testArray.reverse();
  console.log(testArray);
}

// .tosorted() method
// মেইন অ্যারেকে কোনরুপ পরিবর্তন না করে অন্য আরেকটা অ্যারে তৈরী করে তাকে অ্যালফাবেটিকালি সাজানোর জন্য এই মেথড ইউজ করা হয়। 
{
  let testArray = ['Apple', 'Mango', 'Banana', 'Pine Apple', 'Mango'];
  let newArray = testArray.toSorted(); // এখানে .toSorted ইউজ করার ফলে আগের লাইনের testArray তে কোনো পরিবর্তন হবেনা। পরিবর্তিত অ্যারেটা এই লাইনের newArray তে স্টোর হবে।
  console.log(newArray);
}

// .toReversed() method
//এই মেথড হুবহু .reverse() মেথডের মতই কাজ করে।
//পার্থক্য হলো এটাও মেইন অ্যারেকে কোনরুপ পরিবর্তন না করে অন্য আরেকটা অ্যারে তৈরী করে অ্যারের ভেতরে থাকা এলিমেন্ট গুলোকে উলটো দিক থেকে সাজানোর জন্য এই মেথড ইউজ করা হয়।
{
  let testArray = ['Apple', 'Mango', 'Banana', 'Pine Apple', 'Mango'];
  let newArray = testArray.toReversed(); // এখানে .toReversed ইউজ করার ফলে আগের লাইনের testArray তে কোনো পরিবর্তন হবেনা। পরিবর্তিত অ্যারেটা এই লাইনের newArray তে স্টোর হবে।
  console.log(testArray);
  console.log(newArray);
}

//**************** Sort Numbers ***************** */
{
  let numbers = [4,2,86,5,25,63,30]
  numbers.sort(function(x,y){
    return x-y;
  }); // নাম্বার sort করার ক্ষেত্রে অর্থাৎ নাম্বার গুলোকে ছোট থেকে বড় আকারে সাজানোর জন্য .sort() মেথডের ব্র্যাকেটে একটা ফাংশন লিখতে হবে। ফাংশনের প্যারেন্থিসিস ব্রাকেটে ২টা আর্গুমেন্ট দিতে হবে কমা দিয়ে (x,y). এখানে x মানে অ্যারের প্রথম এলিমেন্ট 4, আর y মানে অ্যারের ২য় এলিমেন্ট 5. অর্থাৎ 4 থেকে 5 বিয়োগ হবে, রেজাল্ট যেহেতু পজেটিভ হবে তাই Y এর মান (2) X এর আগে চলে আসবে অর্থাৎ অ্যারেটা তখন [2,4] এভাবে শুরু হবে। এরপর আবার মূল অ্যারের 2 থেকে 86 বিয়োগ হবে, তখন x=2, y= 86 হবে।   
  
  //ফাংশনের কার্লি ব্রেসের মধ্যে লিখতে হবে return x-y, এখানে x থেকে y বিয়োগের রেজাল্ট পজেটিভ হলে y আগে চলে আসবে ও x পরে চলে যাবে (y,x)

  console.log(numbers);
}


//********************* Array Iteration Method ******************* */

// .every() method
// একটা অ্যারের সবগুলা এলিমেন্ট একটা নির্দিষ্ট সংখ্যা থেকে বড় নাকি ছোট তা বের করার জন্য এই .every() মেথড ব্যবহার হয়।
{
  const numbers = [45, 26, 48, 12, 6];
  const allOver10 = numbers.every(function(value, index, array){
    return value > 10;
  }); //.every() এর ব্র্যাকেটে ফাংশন লিখতে হয়, ফাংশনে value, index, array এই তিনটা আর্গুমেন্ট দিতে হয়, এরপর ফাংশনের কার্লি ব্রেসে মধ্যে return value > 10 লিখতে হয়, এটা একটা কন্ডিশন, এরমানে হলো এই অ্যারের সবগুলো এলিমেন্ট ১০ থেকে বড় কিনা। যেহেতু এই অ্যারের সব এলিমেন্ট ১০ থেকে বড় নয় তাই false রিটার্ন করবে

  console.log(allOver10);
}

// .some() method
// একটা অ্যারের যেকোন একটা এলিমেন্ট একটা নির্দিষ্ট সংখ্যা থেকে বড় নাকি ছোট তা বের করার জন্য এই .every() মেথড ব্যবহার হয়।
{
  const numbers = [45, 26, 48, 12, 6];
  const allOver10 = numbers.some(function(value, index, array){
    return value > 10;
  }); //.every() এর ব্র্যাকেটে ফাংশন লিখতে হয়, ফাংশনে value, index, array এই তিনটা আর্গুমেন্ট দিতে হয়, এরপর ফাংশনের কার্লি ব্রেসে মধ্যে return value > 10 লিখতে হয়, এটা একটা কন্ডিশন, এরমানে হলো এই অ্যারের যেকোনো একটা এলিমেন্ট ১০ থেকে বড় কিনা।  যেহেতু এই অ্যারেতে ১০ থেকে বড় অনেক গুলো এলিমেন্ট আছে তাই True রিটার্ন করবে। every এর সাথে some এর পার্থক্য হলো every তে অ্যারের সকল এলিমেন্টকে কন্ডিশতের সাথে মিলতে হয়, তবেই True আসে, কিন্ত some এ অ্যারের যেকোনো ১টা এলিমেন্টো যদি কন্ডিশনের সাথে ম্যাচ করে তাহলেও True আসবে।

  console.log(allOver10);
}

// .split() method (স্ট্রিং কে অ্যারে তে কনভার্ট করার জন্য এই মেথড ইউজ করা হয়)
{
  let a = 'Hello World!';
  let myArray = a.split(' ');
  console.log(myArray);
}
